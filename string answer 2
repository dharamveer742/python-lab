2) How to access characters in a string? 
Ans. String Indexing - You can access individual characters of a string using indexing and a range of characters using slicing.
 In                    Python, index starts from 0 and keeps increasing by 1 with every character.

	This is called Positive Indexing(or indexing from the beginning). If there are n characters in a string, the 1st character
        will be index 0 and the last character will have index n-1.

	Python also allows negative indexing(indexing from the end). If there are n characters in a string, the last character will
        be index -1 and the first character will have index -n.

Code:-

str = 'PYTHON'

# first character
print('str[0] =', str[0])

# last character
print('str[-1] =', str[-1])

# second character
print('str[1] =', str[1])

# second last character
print('str[-2] =', str[-2])
Output

str[0] = P
str[-1] = N
str[1] = Y
str[-2] = O

If you try to access a character out of range, it will raise an IndexError.

str = 'PYTHON'
print(str[10])
>>> IndexError: string index out of range

Also, the index must be an integer. You can’t use floats or other types for indexing. This will result in TypeError.

str = 'PYTHON'
print(str[1.5])
>>> TypeError: string indices must be integers

String Slicing:-To access a range of characters, you need to use slicing. Basically, you have to specify the start index and the
                end index, separated by a colon, to return a part of the string.

Slicing Strings in Python

Remember - The last index is not included.

Let’s say you want to access all the elements from 2nd index to 4th index of PYTHON string. In that case, your end index will be 5.

Code:-

str = 'PYTHON'
# 2nd to 4th index
print('str[2:5] =', str[2:5])
Output
str[2:5] = THO

If you leave out the start index, the range will start at the first character.

Code

str = 'PYTHON'
# 2nd to 4th index
print('str[:5] =', str[:5])
Output
str[:5] = PYTHO

If you leave out the end index, the range will go to the end.

Code

str = 'PYTHON'
print('str[2:] =', str[2:])
Output
str[2:] = THON

You can also use negative index for slicing. Just use the negative index counterpart of your positive index.

str = 'PYTHON'

# Both produce the same result

print('str[2:5] =', str[2:5])
print('str[-4:-1] =', str[-4:-1])
Output
str[2:5] = THON
str[-5:-2] = LEN

